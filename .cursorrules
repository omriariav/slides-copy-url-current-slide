# Cursor Rules for Google Slides Extension Project

## Project Context
This is a Chrome extension that adds a "Copy current slide link" button to Google Slides using **two integration methods**: Quick Actions Menu (native) and Share Dialog (overlay). Features event-driven architecture with Google-style UI elements.

## Core Principles

### 1. Dual Integration Strategy
- **Quick Actions Menu**: Native Google menu integration for seamless UX
- **Share Dialog Overlay**: Overlay positioning for broader compatibility
- **Respect Google's UI**: Never manually manipulate Google's native menu behavior
- **Progressive Enhancement**: Core functionality works, enhancements add value

### 2. Architecture Patterns
- **Always prefer event-driven architecture over periodic scanning**
- **Use native integration when possible, overlay as fallback**
- **Implement one-time injection with smart state management**
- **Apply defensive programming with graceful degradation**
- **Let Google handle what Google does best (menu state, closing behavior)**

### 3. Performance Guidelines
- **Avoid setInterval for DOM monitoring - use event listeners instead**
- **Implement one-time injection patterns to prevent duplicate operations**
- **Use production-aware logging to minimize console noise**
- **Prefer targeted DOM queries over broad searches**
- **Cache slide ID updates only when necessary**

### 4. State Management
- **Use a centralized state object for all extension state**
- **Implement injection flags to prevent duplicate injections**
- **Track fallback checks to ensure one-time-only operations**
- **Keep state minimal - only store what's necessary**
- **Always reset state flags in appropriate cleanup functions**

## Coding Standards

### Function Naming Conventions
- **Action functions:** `injectCurrentSlideOption()`, `showLinkCopiedTooltip()`
- **Query functions:** `getCurrentSlideId()`, `buildSlideUrl()`  
- **Setup functions:** `setupQuickActionsMenuDetection()`, `scanForExistingQuickActionsMenu()`
- **Handler functions:** `createQuickActionsClickHandler()`, `handleMenuClick()`
- **Utility functions:** `throttleLog()`, `updateSlideId()`

### Variable Naming
- **Use descriptive names:** `quickActionsInjected` not `injected`
- **Boolean flags:** `isInjecting`, `quickActionsInjected`, `fallbackCheckDone`
- **DOM elements:** `copyLinkButton`, `quickActionsMenu`, `tooltipElement`
- **State tracking:** `currentSlideId`, `frameType`, `isShareIframe`

### CSS Conventions
- **Use high specificity selectors:** `#element-id:hover` over `.class:hover`
- **Apply `!important` strategically for third-party site integration**
- **Follow Google Material Design patterns:**
  - Border radius: `5px` for Google-style tooltips, `24px` for pill buttons
  - Font family: `'Google Sans', Roboto, Arial, sans-serif`
  - Google blue: `#1a73e8`
  - Tooltip styling: `#202124` background, `15px` padding
  - Hover background: `rgba(11, 87, 208, 0.09)`

## Code Patterns

### Quick Actions Menu Integration
```javascript
// Preferred: Native menu integration
function setupQuickActionsMenuDetection() {
  document.addEventListener('click', (event) => {
    const quickActionsButton = event.target.closest('#scb-quick-actions-menu-button');
    if (quickActionsButton) {
      // Update slide ID when menu is accessed
      const newSlideId = getCurrentSlideId();
      if (newSlideId !== state.currentSlideId) {
        state.currentSlideId = newSlideId;
      }
      
      // Only inject if not already done
      if (!state.quickActionsInjected && !state.fallbackCheckDone) {
        waitForQuickActionsMenu();
      }
    }
  }, true);
}
```

### One-Time Injection Pattern
```javascript
// Prevent duplicate injections with state flags
function injectCurrentSlideOption(menu) {
  // Check injection flag first
  if (state.quickActionsInjected) {
    return;
  }
  
  // Check DOM to be sure
  const existingOption = menu.querySelector('#current-slide-copy-option');
  if (existingOption) {
    state.quickActionsInjected = true;
    return;
  }
  
  // Create and inject
  const menuItem = createQuickActionsMenuItem();
  copyLinkItem.insertAdjacentElement('afterend', menuItem);
  
  // Mark as completed
  state.quickActionsInjected = true;
}
```

### Google-Style Tooltip Creation
```javascript
// Match Google's exact tooltip styling
function showLinkCopiedTooltip() {
  const tooltip = document.createElement('div');
  tooltip.style.cssText = `
    position: fixed !important;
    top: 20px !important;
    left: 50% !important;
    transform: translateX(-50%) !important;
    background: #202124 !important;
    color: #ffffff !important;
    font-size: 14px !important;
    padding: 15px !important;
    border-radius: 5px !important;
    opacity: 0 !important;
    transition: opacity 0.15s ease-in-out !important;
  `;
  
  // Fade in/out animation
  document.body.appendChild(tooltip);
  setTimeout(() => tooltip.style.opacity = '1', 10);
  setTimeout(() => {
    tooltip.style.opacity = '0';
    setTimeout(() => tooltip.remove(), 200);
  }, 2000);
}
```

### Non-Interfering Click Handlers
```javascript
// DON'T manually manipulate Google's menu behavior
function createQuickActionsClickHandler(textElement) {
  return async (event) => {
    event.preventDefault();
    event.stopPropagation();
    
    // Do our work
    const url = buildSlideUrl({ mode: 'EDIT' });
    await navigator.clipboard.writeText(url);
    showLinkCopiedTooltip();
    
    // Let Google handle menu closing naturally
    // DON'T: menu.style.visibility = 'hidden'
  };
}
```

### Production-Aware Logging
```javascript
// Smart logging for production deployment
const PRODUCTION = false; // Toggle for Chrome Store
const log = (...args) => {
  if (PRODUCTION) {
    // Only critical logs in production
    const message = args.join(' ');
    if (message.includes('‚ùå') || message.includes('Error') || 
        message.includes('‚úÖ Current slide URL copied')) {
      console.log('[SlideURLCopier]', ...args);
    }
  } else if (DEBUG) {
    console.log('[SlideURLCopier]', ...args);
  }
};
```

### Fallback Check Pattern
```javascript
// One-time fallback mechanism
if (!state.quickActionsInjected && !state.fallbackCheckDone) {
  // First scenario: Never injected
  state.fallbackCheckDone = true;
  waitForQuickActionsMenu();
} else if (state.quickActionsInjected && !state.fallbackCheckDone) {
  // Second scenario: Injected but verify DOM
  setTimeout(() => {
    const menu = document.querySelector('.goog-menu[role="menu"]');
    if (menu && !menu.querySelector('#current-slide-copy-option')) {
      state.quickActionsInjected = false; // Reset for re-injection
      injectCurrentSlideOption(menu);
    }
    state.fallbackCheckDone = true;
  }, 100);
}
```

## DOM Manipulation Guidelines

### Native Menu Integration
- **Find existing menu structure** - Use Google's class patterns
- **Insert adjacent to similar elements** - `copyLinkItem.insertAdjacentElement('afterend', newItem)`
- **Match exact HTML structure** - Copy Google's element hierarchy
- **Use Google's CSS classes** - `goog-menuitem`, `scb-sqa-menuitem`, etc.
- **Respect menu behavior** - Don't manually show/hide Google's menus

### Element Creation for Google Menus
```javascript
// Match Google's menu item structure exactly
const menuItem = document.createElement('div');
menuItem.className = 'goog-menuitem scb-sqa-menuitem';
menuItem.setAttribute('role', 'menuitem');
menuItem.setAttribute('aria-disabled', 'false');

const content = document.createElement('div');
content.className = 'goog-menuitem-content';

const innerContent = document.createElement('div');
innerContent.className = 'scb-sqa-menuitem-content apps-menuitem';
```

### Tooltip Positioning
```javascript
// Fixed positioning for consistent placement
tooltip.style.cssText = `
  position: fixed !important;
  top: 20px !important;  // Close to top like Google's
  left: 50% !important;
  transform: translateX(-50%) !important;
  z-index: 10000000 !important;
`;
```

## State Management Patterns

### Extended State Object
```javascript
const state = {
  // Original properties
  isInitialized: false,
  currentSlideId: null,
  isReady: false,
  isInIframe: window.self !== window.top,
  isShareIframe: false,
  frameType: 'unknown',
  
  // Quick Actions properties
  quickActionsInjected: false,
  fallbackCheckDone: false,
  
  // Overlay properties  
  isInjecting: false,
  
  // Utility properties
  loggedElements: new Map()
};
```

### Slide ID Management
```javascript
// Update slide ID only when accessing quick actions
function handleQuickActionsClick() {
  const newSlideId = getCurrentSlideId();
  if (newSlideId !== state.currentSlideId) {
    state.currentSlideId = newSlideId;
    log('üìç Updated current slide ID to:', newSlideId);
  }
}
```

## Browser Extension Specific

### Dual Integration Approach
- **Quick Actions**: Seamless native integration
- **Share Dialog**: Fallback overlay approach
- **Frame Detection**: Different behavior per frame type
- **Cross-frame Communication**: Message passing for iframe scenarios

### Google Sites Integration Best Practices
- **Never fight Google's behavior** - Work with their systems
- **Use Google's CSS classes** when integrating natively
- **Respect Google's state management** - Don't manually override
- **Match Google's timing** - Let their animations complete
- **Follow Google's patterns** - Hover effects, focus states, etc.

## Performance Targets

- **One-time injection**: No re-injection after successful setup
- **Minimal DOM queries**: Cache elements and slide IDs appropriately  
- **Production logging**: Only errors and critical success messages
- **Event-driven updates**: No polling or continuous monitoring
- **Clean state management**: Flags prevent unnecessary operations

## Testing Guidelines

### Manual Testing Scenarios
1. **Quick Actions Integration**: Click arrow ‚Üí verify menu item appears
2. **Share Dialog Integration**: Click Share ‚Üí verify overlay button works
3. **Slide Navigation**: Change slides ‚Üí verify URL updates correctly
4. **Click Responsiveness**: Verify no double-click issues
5. **Tooltip Display**: Verify Google-style tooltip appears and fades

### Production Preparation
```javascript
// Set production flag before Chrome Store upload
const PRODUCTION = true; // Change this line only
```

---

*Follow these rules to maintain consistency with the established dual-integration architecture and ensure optimal performance for both Quick Actions Menu and Share Dialog features.* 